#!/bin/sh

case "$1" in
	-g) flagsettings=$2; shift; shift ;;
	*)  flagsettings= ;;
esac

copy() {
	if [ -n "$WAYLAND_DISPLAY" ]; then
		wl-copy
	else
		xclip -selection clipboard -i
	fi
}

paste() {
	if [ -n "$WAYLAND_DISPLAY" ]; then
		wl-paste
	else
		xclip -selection clipboard -o
	fi
}

case "$1" in
	'') url=`paste` ;;
	*)  url=$1      ;;
esac

case "$url" in
	*.*)
		;;
	*)
		echo >&2 'URL contains no dots. Likely wrong.'
		exit 1
		;;
esac

host=${url#*//}
if [ x"$host" = x"$url" ]; then
	proto=https:
else
	proto=${url%%//*}
fi
host=${host%%/*}
host=${host#*@}
host=${host%:*}
while :; do
	case "$host" in
		*.*.*)
			host=${host#*.}
			;;
		*)
			break
			;;
	esac
done
case "$proto" in
	https:)
		;;
	*)
		host=$proto//$host
		;;
esac
hostfile="$HOME/.sitepw.hosts/`printf '%s' "$host" | tr /: __`"

confsettings=`cat ~/.sitepw.conf 2>/dev/null`
hostsettings=`cat "$hostfile" 2>/dev/null`
settings="$confsettings $hostsettings $flagsettings"

alias=$host
generation=1
len=12
method=Argon2id-16Mx1
oldpw=false
encoding=base85

for s in $settings; do
	k=${s%%=*}
	v=${s#*=}
	case "$k" in
		alias)
			alias=$v
			;;
		generation)
			generation=$v
			;;
		len)
			len=$v
			;;
		method)
			method=$v
			;;
		encoding)
			encoding=$v
			;;
		use_old_password)
			oldpw=true
			;;
		0)
			method=SHA1
			generation=$k
			;;
		[0-9]*)
			method=HMAC-SHA-256
			generation=$k
			;;
		a[0-9]*)
			method=Argon2id-16Mx1
			generation=${k#a}
			;;
	esac
done

{
	if [ x"$alias" != x"$host" ]; then
		printf 'alias=%s\n' "$alias"
	fi
	printf 'generation=%s\n' "$generation"
	printf 'len=%s\n' "$len"
	printf 'method=%s\n' "$method"
	printf 'encoding=%s\n' "$encoding"
	if $oldpw; then
		printf 'use_old_password\n'
	fi
} > "$hostfile"

if $oldpw; then
	pw=`cat ~/.sitepw.old`
else
	pw=`cat ~/.sitepw`
fi

encode() {
	case "$encoding" in
		base64)
			base64 | cut -c 1-"$len"
			;;
		base85)
			basenc --z85 --wrap=0 | cut -c 1-"$len"
			;;
	esac
}

generate() {
	case "$encoding" in
		base64)
			# This allows for partial output mode of base64 blocks.
			# Sequence: 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 3, 5 -> 4.
			bytes=$(((len + 1) * 3 / 4))
			;;
		base85)
			# basenc --z85 has no padding logic, so always use whole blocks.
			# Sequence: 1 -> 4, 2 -> 4, 3 -> 4, 4 -> 4, 5 -> 4, 6 -> 8.
			bytes=$(((len + 4) / 5 * 4))
			;;
	esac
	case "$method" in
		SHA1)
			printf '%s#%s#%s#%s#%s\n' "$alias" "$pw" "$alias" "$pw" "$alias" | nettle-hash -a sha1 --raw
			;;
		HMAC-SHA-256)
			# As nettle-hash can't do HMAC directly, this is done
			# manually here :(
			key_hex=$(printf '%s#%s' "$pw" "$generation" | xxd -p)
			case "$key_hex" in
				?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????*)
					# Too long key.
					# Hash it.
					key_hex=$(printf '%s' "$key_hex" | xxd -p -r | nettle-hash -a sha256 --raw | xxd -p)
					;;
			esac
			while :; do
				case "$key_hex" in
					????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????)
						break
						;;
					*)
						key_hex=$key_hex'00'
				esac
			done
			xor_ipad() {
				sed -e '
					s,..,<&>,g;
					s,<0,3,g;
					s,<1,2,g;
					s,<2,1,g;
					s,<3,0,g;
					s,<4,7,g;
					s,<5,6,g;
					s,<6,5,g;
					s,<7,4,g;
					s,<8,b,g;
					s,<9,a,g;
					s,<a,9,g;
					s,<b,8,g;
					s,<c,f,g;
					s,<d,e,g;
					s,<e,d,g;
					s,<f,c,g;
					s,0>,6,g;
					s,1>,7,g;
					s,2>,4,g;
					s,3>,5,g;
					s,4>,2,g;
					s,5>,3,g;
					s,6>,0,g;
					s,7>,1,g;
					s,8>,e,g;
					s,9>,f,g;
					s,a>,c,g;
					s,b>,d,g;
					s,c>,a,g;
					s,d>,b,g;
					s,e>,8,g;
					s,f>,9,g;
				'
			}
			xor_opad() {
				sed -e '
					s,..,<&>,g;
					s,<0,5,g;
					s,<1,4,g;
					s,<2,7,g;
					s,<3,6,g;
					s,<4,1,g;
					s,<5,0,g;
					s,<6,3,g;
					s,<7,2,g;
					s,<8,d,g;
					s,<9,c,g;
					s,<a,f,g;
					s,<b,e,g;
					s,<c,9,g;
					s,<d,8,g;
					s,<e,b,g;
					s,<f,a,g;
					s,0>,c,g;
					s,1>,d,g;
					s,2>,e,g;
					s,3>,f,g;
					s,4>,8,g;
					s,5>,9,g;
					s,6>,a,g;
					s,7>,b,g;
					s,8>,4,g;
					s,9>,5,g;
					s,a>,6,g;
					s,b>,7,g;
					s,c>,0,g;
					s,d>,1,g;
					s,e>,2,g;
					s,f>,3,g;
				'
			}
			{
				printf '%s\n' "$key_hex" | xor_opad | xxd -p -r
				{
					printf '%s' "$key_hex" | xor_ipad | xxd -p -r
					printf '%s\n' "$alias"
				} | nettle-hash -a sha256 --raw
			} | nettle-hash -a sha256 --raw
			;;
		PBKDF2-SHA-256-10k)
			printf '%s' "$pw" | nettle-pbkdf2 --iterations=10000 --length="$bytes" --raw "$alias#$generation"
			;;
		Argon2id-1Mx16)
			printf '%s' "$pw" | argon2 "$alias#$generation#0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353" -id -r -t 16 -m 10 -p 1 -l "$bytes" | xxd -r -p
			;;
		Argon2id-4Mx3)
			printf '%s' "$pw" | argon2 "$alias#$generation#0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353" -id -r -t 3 -m 12 -p 1 -l "$bytes" | xxd -r -p
			;;
		Argon2id-16Mx1)
			printf '%s' "$pw" | argon2 "$alias#$generation#0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353" -id -r -t 1 -m 14 -p 1 -l "$bytes" | xxd -r -p
			;;
		*)
			printf >&2 'Unsupported method: %s\n' "$method"
			;;
	esac
}

opw=`generate | encode`

case "$1" in
	'')
		printf '%s' "$opw" | copy
		xmessage -timeout 1 -buttons OK "$host -> $opw"
		;;
	*)
		printf '%s\n' "$opw"
		;;
esac

